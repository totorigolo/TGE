# Défini les propriétés du monde
[world]
	gravity = (0.f, -9.8f)
	PPM = 100.f
	bckgc = (0, 0, 0, 255)
	originView = (-1.7f, 2.f)
	defaultZoom = 1.f

	
# Charge les textures
[textures]
#	nom = chemin
	way 		= tex/way.png
	box 		= tex/box.png
	box2 		= tex/box2.png
	caisse 		= tex/caisse.png
	tonneau 	= tex/tonneau.png
	circle		= tex/circle.png
	ball 		= tex/ball.png
	ground 		= tex/ground.png
	lampadere 	= tex/lampadere.png
	volcan		= tex/volcan.png

	
# Crée les bodies
[bodies]
#   texture,ID(facultatif et unique) = (position + rotation° facultative) type proprietés
# (les propriétées sont facultatives comme les paramètres C++)
# types : ( + propriétés)
#  - db = dynamicBox + densité(1.f), friction(0.2f), restitution(0.0f)!
#  - dc = dynamicCircle + densité(1.f), friction(0.2f), restitution(0.0f)!
#  - sb = staticBox + friction(0.2f), restitution(0.0f)!
#  - kb = kinematicBox + restitution(0.0f)!
# [flags] :
#  - [ac] = actor
#  - [osp] = oneSidedPlatform, seulement les PolygonShape
#  - [fl] = fullySimulated (valeur par défaut)

# ex : box = (5.2f, 9.f, 45.f) db [ac], 2.f!

	ground = (0.f, -0.64f) sb, 0.4f!

	way		= (-5.f, 5.5f, 90.f) sb [osp]
	way		= (-5.f, 6.f) db [ac]
	
	way		= (-5.f, 0.5f, 90.f) sb
	way 	= (-5.f, 1.5f, 90.f) sb
	way 	= (-4.25f, 1.75f) sb
	way 	= (-3.25f, 1.75f) sb
	way 	= (-3.f, 1.5f, 90.f) sb
	
	way, 1 	= (-3.f, 0.5f, 90.f) db, 1.f!
	tonneau	= (-4.55f, 0.25f) db, 15.f, 0.05f!
	ball 	= (-4.55f, 0.675f) dc [ac], 8.f, 0.05f!
	
	way,3 		= (0.f, 2.5f) sb [osp]
	way 		= (1.5f, 2.5f) sb [osp]
	box 		= (0.f, 3.f) db [ac]
	box2, 4		= (1.5f, 3.f) db [ac]
	caisse, 2 	= (1.9f, 3.f) db [ac]
	
	caisse 	= (1.9f, 4.f) kb, 0.9f!

	
# Crée les joints
[joints]
# type,ID(facultatif et unique) = proprietés
# (les dernières propriétés() sont facultatives comme les paramètres C++)
# types : ( + propriétés) + "!" à la fin // ((col = collideConnected))
# - dj = distanceJoint + b1, p1, b2, p2, frequency(4.0f), damping(0.5f), col(true), color(magenta)
# - fj = frictionJoint + b1, p1, b2, p2, maxForce(0.f), maxTorque(0.f), col(true), color(magenta)
# - gj = gearJoint + b1, b2, j1, j2, ratio(1.f), col(true), color(80, 0, 200)
# - prj = prismaticJoint + b1, b2, anchorRel2A, axis, enableLimits(false), lower(0.f), upper(0.f)
#													, enableMotor(false), speed(0.f), maxForce(10.f),
#													, col(false), color(green)
# - puj = pulleyJoint + b1, p1, b2, p2, groundP1, groundP2, ratio(1.f), col(true), color(170, 80, 0)
# - rej = revoluteJoint + b1, b2, anchorRel2A, enableLimits(false), lower(0.f), upper(0.f)
#											 , enableMotor(false), speed(0.f), maxTorque(10.f)
#											 , col(false), color(green)
# - roj = ropeJoint + b1, p1, b2, p2, maxLength, col(true), color(magenta)
# - wej = weldJoint + b1, b2, anchorRel2A, frequency(4.f), damping(0.5f), col(false), color(magenta)
# - whj = wheelJoint + car, wheel, pWheel, axis, frequency(4.f), damping(0.5f)
#											   , enableMotor(false), speed(0.f), maxTorque(10.f)
#											   , col(false), color(magenta)

# ex : puj = 4_ (0.f, 0.f)_ 2_ (0.f, 0.f)_ (-1.f, 2.f)_ (1.f, 2.f)_ 1.5f!

	puj	= 1_ (0.f, 0.f)_ 2_ (0.f, 0.f)_ (-2.f, 0.5f)_ (1.9f, 4.f)_ 1.5f!
	roj	= 3_ (0.f, 0.f)_ 4_ (0.f, 0.f)_ 2.f_ true_ (0, 255, 255)!

	
# Crée des textures sans colisions
# "deco_" + nombre == z-index // parallax
# ex: [deco_5]
[deco_5]
#   texture = (position + rotation° facultative), z-index

# ex : lampadere = (5.2f, 9.f, 45.f), 5

	volcan = (0.f, 5.f), 1

[deco_-1]
	

# Crée un sol à partir d'une fonction
# "floor_" + nombre == z-index (pas parallax)
# ex: [floor_5]
[floor_5]
#   : (position)
















